{
  "name": "SemanticModel",
  "compatibilityLevel": 1500,
  "model": {
    "culture": "en-GB",
    "dataSources": [
      {
        "type": "structured",
        "name": "SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "PPDC1SQL01\\PartsPlus",
            "database": "TF_WebApp_PartsControlBox"
          },
          "authentication": null,
          "query": null
        },
        "options": {},
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "ppdc1sql01\\partsplus;TF_WebApp_PartsControlBox",
          "Username": "partsplusuk\\robby.lee",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/PPDC1SQL01\\PartsPlus;PP_BI_Reporting",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "PPDC1SQL01\\PartsPlus",
            "database": "PP_BI_Reporting"
          },
          "authentication": null,
          "query": null
        },
        "options": {},
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "ppdc1sql01\\partsplus;PP_BI_Reporting",
          "Username": "partsplusuk\\robby.lee",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/PPDC1SQL01\\PartsPlus;PP_SurchargeMgmt",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "PPDC1SQL01\\PartsPlus",
            "database": "PP_SurchargeMgmt"
          },
          "authentication": null,
          "query": null
        },
        "options": {},
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "ppdc1sql01\\partsplus;PP_SurchargeMgmt",
          "Username": "partsplusuk\\robby.lee",
          "EncryptConnection": false
        }
      }
    ],
    "tables": [
      {
        "name": "DriverStats",
        "columns": [
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "DriverName",
            "dataType": "string",
            "sourceColumn": "DriverName"
          },
          {
            "name": "UserType",
            "dataType": "string",
            "sourceColumn": "UserType"
          },
          {
            "name": "Available",
            "dataType": "string",
            "sourceColumn": "Available"
          },
          {
            "name": "Vehicle",
            "dataType": "string",
            "sourceColumn": "Vehicle"
          },
          {
            "name": "Forklift",
            "dataType": "string",
            "sourceColumn": "Forklift"
          },
          {
            "name": "DriverID",
            "dataType": "int64",
            "sourceColumn": "DriverID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select DC.DriverID, DC.Site,#(lf)DC.DriverName,#(lf)UC.UserType,#(lf)DC.Available,#(lf)DC.Vehicle,#(lf)DC.Forklift#(lf)from TF_WebApp_PartsControlBox.dbo.tDriverConfig DC#(lf)Left Join TF_WebApp_PartsControlBox.dbo.tUserConfig UC On DC.DriverUsername = UC.Username\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalDrivers",
            "expression": " if(isblank(count('DriverStats'[DriverName])),0,COUNT(('DriverStats'[DriverName])))"
          },
          {
            "name": "ForkliftAccess",
            "expression": " if(isblank(countrows(filter(DriverStats,DriverStats[Forklift] = \"1\"))),0,countrows(filter(DriverStats,DriverStats[Forklift]=\"1\")))"
          },
          {
            "name": "ForkliftOff",
            "expression": " if(isblank(CALCULATE(COUNTROWS(DriverStats),FILTER(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Forklift]=\"1\"))),0,CALCULATE(COUNTROWS(DriverStats),FILTER(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Forklift]=\"1\")))"
          },
          {
            "name": "Temps",
            "expression": " if(isblank(COUNTROWS(FILTER(DriverStats,DriverStats[UserType]=\"Temp\"))),0,COUNTROWS(FILTER(DriverStats,DriverStats[UserType]=\"Temp\")))"
          },
          {
            "name": "VanAccess",
            "expression": " if(isblank(COUNTROWS(filter(DriverStats,DriverStats[Vehicle] = \"1\"))),0,countrows(filter(DriverStats,DriverStats[Vehicle] = \"1\")))"
          },
          {
            "name": "VanOff",
            "expression": " if(isblank(CALCULATE(COUNTROWS(DriverStats),filter(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Vehicle]=\"1\"))),0,CALCULATE(COUNTROWS(DriverStats),filter(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Vehicle]=\"1\")))"
          }
        ]
      },
      {
        "name": "VehicleStats",
        "columns": [
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "VehicleID",
            "dataType": "int64",
            "sourceColumn": "VehicleID"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "DriverName",
            "dataType": "string",
            "sourceColumn": "DriverName"
          },
          {
            "name": "VOR",
            "dataType": "int64",
            "sourceColumn": "VOR"
          },
          {
            "name": "VORStart",
            "dataType": "dateTime",
            "sourceColumn": "VORStart"
          },
          {
            "name": "VORReason",
            "dataType": "string",
            "sourceColumn": "VORReason"
          },
          {
            "name": "TodayChecks",
            "dataType": "int64",
            "sourceColumn": "TodayChecks"
          },
          {
            "name": "WeekChecks",
            "dataType": "int64",
            "sourceColumn": "WeekChecks"
          },
          {
            "name": "MonthChecks",
            "dataType": "int64",
            "sourceColumn": "MonthChecks"
          },
          {
            "name": "YearChecks",
            "dataType": "int64",
            "sourceColumn": "YearChecks"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select VC.Site,",
                "VC.VehicleID,",
                "VC.Registration,",
                "VC.DriverName,",
                "Case When VV.Registration is not null Then '1' Else 0 End as VOR,",
                "Case When VV.Registration is not null and VV.VOREndDate is null Then VV.VORStartDate Else null End as VORStart,",
                "Case When VV.Registration is not null and VV.VOREndDate is null Then VV.StartComment Else '' End as VORReason,",
                "Case When VI.Added between convert (date,getdate()) and getdate() Then 1 Else 0 End as TodayChecks,",
                "Case When VI.Added between dateadd(wk,datediff(wk,0,getdate()),0) and getdate() Then 1 Else 0 End as WeekChecks,",
                "Case When VI.Added between dateadd(mm,datediff(mm,0,getdate()),0) and getdate() Then 1 Else 0 End as MonthChecks,",
                "Case When VI.Added between dateadd(yy,datediff(yy,0,getdate()),0) and getdate() Then 1 Else 0 End as YearChecks",
                "from TF_WebApp_PartsControlBox.dbo.tVehicleConfig VC",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVOR_Vehicle VV On VC.Registration = VV.Registration",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVehicleInspectionLog VI On VC.Registration = VI.Registration",
                "\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalVehicles",
            "expression": " if(isblank(DISTINCTCOUNT(VehicleStats[Registration])),0,distinctcount(VehicleStats[Registration]))+0"
          },
          {
            "name": "TodayChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[TodayChecks]=1)),[TotalVehicles])=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[TodayChecks]=1)),[TotalVehicles]))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "WeekChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[WeekChecks]=1)),[TotalVehicles]*WEEKDAY(TODAY(),2))=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[WeekChecks]=1)),[TotalVehicles]*WEEKDAY(TODAY(),2)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "MonthChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[MonthChecks]=1)),[TotalVehicles]*DAY(TODAY()))=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[MonthChecks]=1)),[TotalVehicles]*DAY(TODAY())))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "ForkliftStats",
        "columns": [
          {
            "name": "site",
            "dataType": "string",
            "sourceColumn": "site"
          },
          {
            "name": "ForkliftID",
            "dataType": "int64",
            "sourceColumn": "ForkliftID"
          },
          {
            "name": "VOR",
            "dataType": "int64",
            "sourceColumn": "VOR"
          },
          {
            "name": "VORStart",
            "dataType": "dateTime",
            "sourceColumn": "VORStart"
          },
          {
            "name": "VORReason",
            "dataType": "string",
            "sourceColumn": "VORReason"
          },
          {
            "name": "TodayChecks",
            "dataType": "int64",
            "sourceColumn": "TodayChecks"
          },
          {
            "name": "WeekChecks",
            "dataType": "int64",
            "sourceColumn": "WeekChecks"
          },
          {
            "name": "MonthChecks",
            "dataType": "int64",
            "sourceColumn": "MonthChecks"
          },
          {
            "name": "YearChecks",
            "dataType": "int64",
            "sourceColumn": "YearChecks"
          },
          {
            "name": "Defect",
            "dataType": "int64",
            "sourceColumn": "Defect"
          },
          {
            "name": "DefectReason",
            "dataType": "string",
            "sourceColumn": "DefectReason"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select FC.site,",
                "FC.ForkliftID,",
                "Case When VF.tForkliftID is not null Then '1' Else 0 End as VOR,",
                "Case When VF.tForkliftID is not null and VF.VOREndDate is null Then VF.VORStartDate Else null End as VORStart,",
                "Case When VF.tForkliftID is not null and VF.VOREndDate is null Then VF.StartComment Else '' End as VORReason,",
                "Case When FI.Added = getdate() Then 1 Else 0 End as TodayChecks,",
                "Case When FI.Added between dateadd(wk,datediff(wk,0,getdate()),0) and getdate() Then 1 Else 0 End as WeekChecks,",
                "Case When FI.Added between dateadd(mm,datediff(mm,0,getdate()),0) and getdate() Then 1 Else 0 End as MonthChecks,",
                "Case When FI.Added between dateadd(yy,datediff(yy,0,getdate()),0) and getdate() Then 1 Else 0 End as YearChecks,",
                "Case When DL.identifier is not null and DL.ActionedDate is null Then 1 Else 0 End as Defect,",
                "Case When DL.identifier is not null and DL.ActionedDate is null Then DL.Defect Else '' End as DefectReason",
                "from TF_WebApp_PartsControlBox.dbo.tForkliftConfig FC",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVOR_Forklift VF On FC.ForkliftID = VF.tForkliftID",
                "Left Join TF_WebApp_PartsControlBox.dbo.tForkliftInspectionLog FI On FC.ForkliftID = FI.ForkLiftID",
                "Left Join TF_WebApp_PartsControlBox.dbo.tDefectLog DL On FC.ForkliftID = DL.ForkliftID",
                "",
                "\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalForklifts",
            "expression": " if(DISTINCTCOUNT(ForkliftStats[ForkliftID])=0,0,DISTINCTCOUNT(ForkliftStats[ForkliftID]))"
          },
          {
            "name": "FLTodayChecks%",
            "expression": " if(divide(SUM(ForkliftStats[TodayChecks]),COUNTROWS(ForkliftStats))=0,0,divide(SUM(ForkliftStats[TodayChecks]),COUNTROWS(ForkliftStats)))",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FLWeekChecks%",
            "expression": " if(divide(sum(ForkliftStats[WeekChecks]),COUNTROWS(ForkliftStats))=0,0,divide(sum(ForkliftStats[WeekChecks]),COUNTROWS(ForkliftStats)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FLMonthChecks%",
            "expression": " if(divide(sum(ForkliftStats[MonthChecks]),COUNTROWS(ForkliftStats))=0,0,divide(sum(ForkliftStats[MonthChecks]),COUNTROWS(ForkliftStats)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "tVOR_Forklift",
        "columns": [
          {
            "name": "VOR_ID",
            "dataType": "int64",
            "sourceColumn": "VOR_ID"
          },
          {
            "name": "Fleet",
            "dataType": "string",
            "sourceColumn": "Fleet"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "VORStartDate",
            "dataType": "dateTime",
            "sourceColumn": "VORStartDate"
          },
          {
            "name": "StartedBy",
            "dataType": "string",
            "sourceColumn": "StartedBy"
          },
          {
            "name": "VOREndDate",
            "dataType": "dateTime",
            "sourceColumn": "VOREndDate"
          },
          {
            "name": "ClosedBy",
            "dataType": "string",
            "sourceColumn": "ClosedBy"
          },
          {
            "name": "StartComment",
            "dataType": "string",
            "sourceColumn": "StartComment"
          },
          {
            "name": "EndComment",
            "dataType": "string",
            "sourceColumn": "EndComment"
          },
          {
            "name": "tForkliftID",
            "dataType": "int64",
            "sourceColumn": "tForkliftID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tVOR_Forklift = Source{[Schema=\"dbo\",Item=\"tVOR_Forklift\"]}[Data]",
                "in",
                "    dbo_tVOR_Forklift"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "VORForklifs",
            "expression": " IF(CALCULATE(COUNTROWS(FILTER(tVOR_Forklift,tVOR_Forklift[VOREndDate]=BLANK())))=BLANK(),0,CALCULATE(COUNTROWS(FILTER(tVOR_Forklift,tVOR_Forklift[VOREndDate]=BLANK()))))"
          },
          {
            "name": "VORFLPerc",
            "expression": " IF(DIVIDE(CALCULATE(COUNTROWS(FILTER(tVOR_Forklift,tVOR_Forklift[VOREndDate]=blank()))),DISTINCTCOUNT(ForkliftStats[ForkliftID]))=0,0,DIVIDE(CALCULATE(COUNTROWS(FILTER(tVOR_Forklift,tVOR_Forklift[VOREndDate]=blank()))),DISTINCTCOUNT(ForkliftStats[ForkliftID])))",
            "formatString": "0%;-0%;0%"
          }
        ]
      },
      {
        "name": "tVOR_Vehicle",
        "columns": [
          {
            "name": "VOR_ID",
            "dataType": "int64",
            "sourceColumn": "VOR_ID"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "VORStartDate",
            "dataType": "dateTime",
            "sourceColumn": "VORStartDate"
          },
          {
            "name": "StartedBy",
            "dataType": "string",
            "sourceColumn": "StartedBy"
          },
          {
            "name": "VOREndDate",
            "dataType": "dateTime",
            "sourceColumn": "VOREndDate"
          },
          {
            "name": "ClosedBy",
            "dataType": "string",
            "sourceColumn": "ClosedBy"
          },
          {
            "name": "StartComment",
            "dataType": "string",
            "sourceColumn": "StartComment"
          },
          {
            "name": "EndComment",
            "dataType": "string",
            "sourceColumn": "EndComment"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tVOR_Vehicle = Source{[Schema=\"dbo\",Item=\"tVOR_Vehicle\"]}[Data]",
                "in",
                "    dbo_tVOR_Vehicle"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "VORVehicles",
            "expression": " CALCULATE(COUNTROWS(tVOR_Vehicle),FILTER(tVOR_Vehicle,tVOR_Vehicle[VOREndDate]=BLANK()))+0"
          },
          {
            "name": "VORPerc",
            "expression": " IF(DIVIDE(CALCULATE(COUNTROWS(tVOR_Vehicle),FILTER(tVOR_Vehicle,tVOR_Vehicle[VOREndDate] = BLANK())),DISTINCTCOUNT(VehicleStats[Registration]))=0,0,DIVIDE(CALCULATE(COUNTROWS(tVOR_Vehicle),FILTER(tVOR_Vehicle,tVOR_Vehicle[VOREndDate] = BLANK())),DISTINCTCOUNT(VehicleStats[Registration])))",
            "formatString": "0%;-0%;0%"
          }
        ]
      },
      {
        "name": "MOT & Services",
        "columns": [
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "MOTDue",
            "dataType": "int64",
            "sourceColumn": "MOTDue"
          },
          {
            "name": "MOTMissed",
            "dataType": "int64",
            "sourceColumn": "MOTMissed"
          },
          {
            "name": "MOTNotSet",
            "dataType": "int64",
            "sourceColumn": "MOTNotSet"
          },
          {
            "name": "ServiceDue",
            "dataType": "int64",
            "sourceColumn": "ServiceDue"
          },
          {
            "name": "ServiceMissed",
            "dataType": "int64",
            "sourceColumn": "ServiceMissed"
          },
          {
            "name": "ServiceNotSet",
            "dataType": "int64",
            "sourceColumn": "ServiceNotSet"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select Site,#(lf)Registration,#(lf)Case When NextMOT > getdate() and NextMOT < getdate()+30 Then 1 Else 0 End as MOTDue,#(lf)Case When NextMOT < getdate() Then 1 Else 0 End MOTMissed,#(lf)Case When NextMOT is null Then 1 Else 0 End MOTNotSet,#(lf)Case When DaysUntilNextService >= 1 Then 1 Else 0 End ServiceDue,#(lf)Case When DaysUntilNextService = 0 Then 1 Else 0 End ServiceMissed,#(lf)Case When DaysUntilNextService is null Then 1 Else 0 End ServiceNotSet#(lf)from TF_WebApp_PartsControlBox.dbo.tVehicleConfig\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "tSiteConfig",
        "columns": [
          {
            "name": "SiteID",
            "dataType": "int64",
            "sourceColumn": "SiteID"
          },
          {
            "name": "SiteCode",
            "dataType": "string",
            "sourceColumn": "SiteCode"
          },
          {
            "name": "Active",
            "dataType": "string",
            "sourceColumn": "Active"
          },
          {
            "name": "Added",
            "dataType": "dateTime",
            "sourceColumn": "Added"
          },
          {
            "name": "AddedBy",
            "dataType": "string",
            "sourceColumn": "AddedBy"
          },
          {
            "name": "Region",
            "dataType": "string",
            "sourceColumn": "Region"
          },
          {
            "name": "TF_GM",
            "dataType": "string",
            "sourceColumn": "TF_GM"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tSiteConfig = Source{[Schema=\"dbo\",Item=\"tSiteConfig\"]}[Data]",
                "in",
                "    dbo_tSiteConfig"
              ]
            }
          }
        ]
      },
      {
        "name": "Regions",
        "columns": [
          {
            "name": "SiteCode",
            "dataType": "string",
            "sourceColumn": "SiteCode"
          },
          {
            "name": "SiteRegion",
            "dataType": "string",
            "sourceColumn": "SiteRegion"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select SiteCode,#(lf)Case When Region = 'TrustFord' Then TF_GM#(lf)Else Region#(lf)End SiteRegion#(lf)from TF_WebApp_PartsControlBox.dbo.tSiteConfig#(lf)\"])",
                "in",
                "    Source"
              ]
            }
          }
        ]
      },
      {
        "name": "vForkliftEachDayOfYear",
        "columns": [
          {
            "name": "Date",
            "dataType": "dateTime",
            "sourceColumn": "Date"
          },
          {
            "name": "VRM",
            "dataType": "int64",
            "sourceColumn": "VRM"
          },
          {
            "type": "calculated",
            "name": "Inspect",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(CALCULATE(MAX(tForkliftInspectionLog[ForkLiftID]),FILTER(tForkliftInspectionLog,tForkliftInspectionLog[ForkLiftID]=vForkliftEachDayOfYear[VRM] &&DATE(YEAR( tForkliftInspectionLog[Added]),MONTH( tForkliftInspectionLog[Added]),DAY( tForkliftInspectionLog[Added]))=vForkliftEachDayOfYear[Date]))<>BLANK(),1,0)"
          },
          {
            "type": "calculated",
            "name": "Site",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE(ForkliftStats[Site],ForkliftStats[ForkliftID],vForkliftEachDayOfYear[VRM])"
          },
          {
            "type": "calculated",
            "name": "VOR",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(CALCULATE(MAX(tVOR_Forklift[tForkliftID]),FILTER(tVOR_Forklift,tVOR_Forklift[tForkliftID]=vForkliftEachDayOfYear[VRM] && tVOR_Forklift[VORStartDate] <= vForkliftEachDayOfYear[Date] && tVOR_Forklift[VOREndDate]>=vForkliftEachDayOfYear[Date]))<>BLANK(),1,0)"
          },
          {
            "type": "calculated",
            "name": "WeekDay",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " FORMAT(vForkliftEachDayOfYear[Date],\"dddd\")"
          },
          {
            "type": "calculated",
            "name": "WeekDayNum",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " WEEKDAY(vForkliftEachDayOfYear[Date],2)"
          },
          {
            "type": "calculated",
            "name": "Status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF(vForkliftEachDayOfYear[Date]>TODAY(),\"https://bit.ly/3r1Re8l\",IF(vForkliftEachDayOfYear[VOR]=1,\"https://bit.ly/3g0lQks\",IF(vForkliftEachDayOfYear[Inspect]=1,\"https://bit.ly/3tXuVmh\",\"https://bit.ly/34c36eX\")))"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;PP_BI_Reporting\",",
                "    dbo_vForkliftEachDayOfYear = Source{[Schema=\"dbo\",Item=\"vForkliftEachDayOfYear\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_vForkliftEachDayOfYear,{{\"Date\", type date}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "vVehicleEachDayOfYear",
        "columns": [
          {
            "name": "Date",
            "dataType": "dateTime",
            "sourceColumn": "Date"
          },
          {
            "name": "VRM",
            "dataType": "string",
            "sourceColumn": "VRM"
          },
          {
            "type": "calculated",
            "name": "AssDrive",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(MAX(tDriverAssignment[NewDriverUsername]),FILTER(tDriverAssignment,tDriverAssignment[Registration]=vVehicleEachDayOfYear[VRM] && DATE(YEAR(tDriverAssignment[DateChanged]),MONTH(tDriverAssignment[DateChanged]),DAY(tDriverAssignment[DateChanged])) <= vVehicleEachDayOfYear[Date] && if(tDriverAssignment[ActualEndDate]=BLANK(),vVehicleEachDayOfYear[Date]+1,tDriverAssignment[ActualEndDate])-1 >= vVehicleEachDayOfYear[Date]))"
          },
          {
            "type": "calculated",
            "name": "DriAv",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(vVehicleEachDayOfYear[Inspect]=1,0,IF(CALCULATE(MAX('Driver Unavailable'[DriverUsername]),FILTER('Driver Unavailable','Driver Unavailable'[DriverUsername] = vVehicleEachDayOfYear[AssDrive] && DATE(YEAR('Driver Unavailable'[StartDate]),MONTH('Driver Unavailable'[StartDate]),DAY('Driver Unavailable'[StartDate]))<=vVehicleEachDayOfYear[Date] && IF('Driver Unavailable'[EndDate] =BLANK(),vVehicleEachDayOfYear[Date]+1,'Driver Unavailable'[EndDate]-1)>=vVehicleEachDayOfYear[Date]))<>BLANK(),1,0))"
          },
          {
            "type": "calculated",
            "name": "Inspect",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(LOOKUPVALUE(tVehicleInspectionLog[Registration],tVehicleInspectionLog[Registration],vVehicleEachDayOfYear[VRM],tVehicleInspectionLog[Added],vVehicleEachDayOfYear[Date])<>BLANK(),1,0)"
          },
          {
            "type": "calculated",
            "name": "Site",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE(VehicleStats[Site],VehicleStats[Registration],vVehicleEachDayOfYear[VRM])"
          },
          {
            "type": "calculated",
            "name": "Status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "  IF(vVehicleEachDayOfYear[Date]>TODAY(),\"https://bit.ly/3r1Re8l\",IF(vVehicleEachDayOfYear[VOR]=1,\"https://bit.ly/3g0lQks\",IF(vVehicleEachDayOfYear[DriAv]=1,\"https://bit.ly/3G4tsNc\",IF(vVehicleEachDayOfYear[Inspect]=1,\"https://bit.ly/3tXuVmh\",\"https://bit.ly/34c36eX\"))))",
            "dataCategory": "ImageUrl"
          },
          {
            "type": "calculated",
            "name": "StatusIcon",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF(vVehicleEachDayOfYear[Date]>TODAY(),\"FUTURE\",IF(vVehicleEachDayOfYear[VOR]=1,\"VOR\",IF(vVehicleEachDayOfYear[DriAv]=1,\"DriAv\",IF(vVehicleEachDayOfYear[Inspect]=1,\"INS\",\"NONE\"))))"
          },
          {
            "type": "calculated",
            "name": "VOR",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(vVehicleEachDayOfYear[Inspect]=1,0,IF(CALCULATE(MAX(tVOR_Vehicle[Registration]),FILTER(tVOR_Vehicle,tVOR_Vehicle[Registration]=vVehicleEachDayOfYear[VRM] && DATE(YEAR(tVOR_Vehicle[VORStartDate]),MONTH(tVOR_Vehicle[VORStartDate]),DAY(tVOR_Vehicle[VORStartDate])) <= vVehicleEachDayOfYear[Date] && IF(tVOR_Vehicle[VOREndDate]=BLANK(),vVehicleEachDayOfYear[Date]+1,IF(DATE(YEAR(tVOR_Vehicle[VOREndDate]),MONTH(tVOR_Vehicle[VOREndDate]),DAY(tVOR_Vehicle[VOREndDate]))=vVehicleEachDayOfYear[Date],vVehicleEachDayOfYear[Date]-1,tVOR_Vehicle[VOREndDate]))>vVehicleEachDayOfYear[Date]))<>BLANK(),1,0))"
          },
          {
            "type": "calculated",
            "name": "WeekDay",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " FORMAT(vVehicleEachDayOfYear[Date],\"dddd\")"
          },
          {
            "type": "calculated",
            "name": "WeekDayNum",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " WEEKDAY(vVehicleEachDayOfYear[Date],2)"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;PP_BI_Reporting\",",
                "    dbo_vVehicleEachDayOfYear = Source{[Schema=\"dbo\",Item=\"vVehicleEachDayOfYear\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_vVehicleEachDayOfYear,{{\"Date\", type date}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "tDriverAssignment",
        "columns": [
          {
            "name": "ID",
            "dataType": "int64",
            "sourceColumn": "ID"
          },
          {
            "name": "VehicleID",
            "dataType": "int64",
            "sourceColumn": "VehicleID"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "OldDriverUsername",
            "dataType": "string",
            "sourceColumn": "OldDriverUsername"
          },
          {
            "name": "NewDriverUsername",
            "dataType": "string",
            "sourceColumn": "NewDriverUsername"
          },
          {
            "name": "DateChanged",
            "dataType": "dateTime",
            "sourceColumn": "DateChanged"
          },
          {
            "name": "EndDate",
            "dataType": "dateTime",
            "sourceColumn": "EndDate"
          },
          {
            "type": "calculated",
            "name": "Count",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(COUNTA(tDriverAssignment[Registration])+1,FILTER(tDriverAssignment,tDriverAssignment[Registration]=EARLIER(tDriverAssignment[Registration]) && tDriverAssignment[DateChanged]<EARLIER(tDriverAssignment[DateChanged])))"
          },
          {
            "type": "calculated",
            "name": "Latest",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(CALCULATE(COUNTA(tDriverAssignment[Registration]),FILTER(tDriverAssignment,tDriverAssignment[Registration]=EARLIER(tDriverAssignment[Registration])))=tDriverAssignment[Count],1,0)"
          },
          {
            "type": "calculated",
            "name": "CountDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " IF(tDriverAssignment[EndDate]=BLANK() && tDriverAssignment[Latest] = 0,tDriverAssignment[Count]+1,tDriverAssignment[Count])"
          },
          {
            "type": "calculated",
            "name": "ActualEndDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": " IF(tDriverAssignment[EndDate]=BLANK(),IF(tDriverAssignment[Latest]=1,tDriverAssignment[EndDate],CALCULATE(MIN(tDriverAssignment[DateChanged]),FILTER(tDriverAssignment,tDriverAssignment[CountDate]=tDriverAssignment[Count] && EARLIER(tDriverAssignment[Registration])=tDriverAssignment[Registration]))),tDriverAssignment[EndDate])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tDriverAssignment = Source{[Schema=\"dbo\",Item=\"tDriverAssignment\"]}[Data]",
                "in",
                "    dbo_tDriverAssignment"
              ]
            }
          }
        ]
      },
      {
        "name": "Driver Unavailable",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          },
          {
            "name": "DriverID",
            "dataType": "int64",
            "sourceColumn": "DriverID"
          },
          {
            "name": "DriverUsername",
            "dataType": "string",
            "sourceColumn": "DriverUsername"
          },
          {
            "name": "StartDate",
            "dataType": "dateTime",
            "sourceColumn": "StartDate"
          },
          {
            "name": "EndDate",
            "dataType": "dateTime",
            "sourceColumn": "EndDate"
          },
          {
            "name": "StartedBy",
            "dataType": "string",
            "sourceColumn": "StartedBy"
          },
          {
            "name": "EndedBy",
            "dataType": "string",
            "sourceColumn": "EndedBy"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tDriverUnavailable = Source{[Schema=\"dbo\",Item=\"tDriverUnavailable\"]}[Data]",
                "in",
                "    dbo_tDriverUnavailable"
              ]
            }
          }
        ]
      },
      {
        "name": "tVehicleInspectionLog",
        "columns": [
          {
            "name": "VehicleInspectionID",
            "dataType": "int64",
            "sourceColumn": "VehicleInspectionID"
          },
          {
            "name": "VehicleID",
            "dataType": "int64",
            "sourceColumn": "VehicleID"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "CurrentMileage",
            "dataType": "int64",
            "sourceColumn": "CurrentMileage"
          },
          {
            "name": "Lights",
            "dataType": "boolean",
            "sourceColumn": "Lights"
          },
          {
            "name": "LightsComment",
            "dataType": "string",
            "sourceColumn": "LightsComment"
          },
          {
            "name": "HornSteering",
            "dataType": "boolean",
            "sourceColumn": "HornSteering"
          },
          {
            "name": "HornSteeringComment",
            "dataType": "string",
            "sourceColumn": "HornSteeringComment"
          },
          {
            "name": "Brakes",
            "dataType": "boolean",
            "sourceColumn": "Brakes"
          },
          {
            "name": "BrakesComment",
            "dataType": "string",
            "sourceColumn": "BrakesComment"
          },
          {
            "name": "WasherWipers",
            "dataType": "boolean",
            "sourceColumn": "WasherWipers"
          },
          {
            "name": "WasherWipersComment",
            "dataType": "string",
            "sourceColumn": "WasherWipersComment"
          },
          {
            "name": "SeatBelts",
            "dataType": "boolean",
            "sourceColumn": "SeatBelts"
          },
          {
            "name": "SeatBeltsComment",
            "dataType": "string",
            "sourceColumn": "SeatBeltsComment"
          },
          {
            "name": "MirrorsGlass",
            "dataType": "boolean",
            "sourceColumn": "MirrorsGlass"
          },
          {
            "name": "MirrorsGlassComment",
            "dataType": "string",
            "sourceColumn": "MirrorsGlassComment"
          },
          {
            "name": "BodyworkDoors",
            "dataType": "boolean",
            "sourceColumn": "BodyworkDoors"
          },
          {
            "name": "BodyworkDoorsComment",
            "dataType": "string",
            "sourceColumn": "BodyworkDoorsComment"
          },
          {
            "name": "Tyres",
            "dataType": "boolean",
            "sourceColumn": "Tyres"
          },
          {
            "name": "TyresComment",
            "dataType": "string",
            "sourceColumn": "TyresComment"
          },
          {
            "name": "BatteryFluids",
            "dataType": "boolean",
            "sourceColumn": "BatteryFluids"
          },
          {
            "name": "BatteryFluidsComment",
            "dataType": "string",
            "sourceColumn": "BatteryFluidsComment"
          },
          {
            "name": "Straps",
            "dataType": "boolean",
            "sourceColumn": "Straps"
          },
          {
            "name": "StrapsComment",
            "dataType": "string",
            "sourceColumn": "StrapsComment"
          },
          {
            "name": "FirstAid",
            "dataType": "boolean",
            "sourceColumn": "FirstAid"
          },
          {
            "name": "FirstAidComment",
            "dataType": "string",
            "sourceColumn": "FirstAidComment"
          },
          {
            "name": "TailLift",
            "dataType": "string",
            "sourceColumn": "TailLift"
          },
          {
            "name": "TailLiftComment",
            "dataType": "string",
            "sourceColumn": "TailLiftComment"
          },
          {
            "name": "Exhaust",
            "dataType": "boolean",
            "sourceColumn": "Exhaust"
          },
          {
            "name": "ExhaustComment",
            "dataType": "string",
            "sourceColumn": "ExhaustComment"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "name": "AdditionalComment",
            "dataType": "string",
            "sourceColumn": "AdditionalComment"
          },
          {
            "name": "Added",
            "dataType": "dateTime",
            "sourceColumn": "Added"
          },
          {
            "name": "AddedBy",
            "dataType": "string",
            "sourceColumn": "AddedBy"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "CMA",
            "dataType": "string",
            "sourceColumn": "CMA"
          },
          {
            "name": "image",
            "dataType": "string",
            "sourceColumn": "image"
          },
          {
            "type": "calculated",
            "name": "Ranking",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(COUNTA(tVehicleInspectionLog[Registration]),filter(tVehicleInspectionLog,EARLIER(tVehicleInspectionLog[Registration])=tVehicleInspectionLog[Registration]))"
          },
          {
            "type": "calculated",
            "name": "WkNum",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " WEEKNUM(tVehicleInspectionLog[Added])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Databases(\"PPDC1SQL01\\PartsPlus\"),",
                "    TF_WebApp_PartsControlBox = Source{[Name=\"TF_WebApp_PartsControlBox\"]}[Data],",
                "    dbo_tVehicleInspectionLog = TF_WebApp_PartsControlBox{[Schema=\"dbo\",Item=\"tVehicleInspectionLog\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_tVehicleInspectionLog,{{\"Added\", type date}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "tForkliftInspectionLog",
        "columns": [
          {
            "name": "ForkLiftInspectionID",
            "dataType": "int64",
            "sourceColumn": "ForkLiftInspectionID"
          },
          {
            "name": "ForkLiftID",
            "dataType": "int64",
            "sourceColumn": "ForkLiftID"
          },
          {
            "name": "FleetNumber",
            "dataType": "string",
            "sourceColumn": "FleetNumber"
          },
          {
            "name": "Forks",
            "dataType": "boolean",
            "sourceColumn": "Forks"
          },
          {
            "name": "ForksComment",
            "dataType": "string",
            "sourceColumn": "ForksComment"
          },
          {
            "name": "Carriage",
            "dataType": "boolean",
            "sourceColumn": "Carriage"
          },
          {
            "name": "CarriageComment",
            "dataType": "string",
            "sourceColumn": "CarriageComment"
          },
          {
            "name": "Mast",
            "dataType": "boolean",
            "sourceColumn": "Mast"
          },
          {
            "name": "MastComment",
            "dataType": "string",
            "sourceColumn": "MastComment"
          },
          {
            "name": "Chains",
            "dataType": "boolean",
            "sourceColumn": "Chains"
          },
          {
            "name": "ChainsComment",
            "dataType": "string",
            "sourceColumn": "ChainsComment"
          },
          {
            "name": "Wheels",
            "dataType": "boolean",
            "sourceColumn": "Wheels"
          },
          {
            "name": "WheelsComment",
            "dataType": "string",
            "sourceColumn": "WheelsComment"
          },
          {
            "name": "Batteries",
            "dataType": "boolean",
            "sourceColumn": "Batteries"
          },
          {
            "name": "BatteriesComment",
            "dataType": "string",
            "sourceColumn": "BatteriesComment"
          },
          {
            "name": "Guards",
            "dataType": "boolean",
            "sourceColumn": "Guards"
          },
          {
            "name": "GuardsComment",
            "dataType": "string",
            "sourceColumn": "GuardsComment"
          },
          {
            "name": "EngineOil",
            "dataType": "boolean",
            "sourceColumn": "EngineOil"
          },
          {
            "name": "EngineOilComment",
            "dataType": "string",
            "sourceColumn": "EngineOilComment"
          },
          {
            "name": "Coolant",
            "dataType": "boolean",
            "sourceColumn": "Coolant"
          },
          {
            "name": "CoolantComment",
            "dataType": "string",
            "sourceColumn": "CoolantComment"
          },
          {
            "name": "Fuel",
            "dataType": "boolean",
            "sourceColumn": "Fuel"
          },
          {
            "name": "FuelComment",
            "dataType": "string",
            "sourceColumn": "FuelComment"
          },
          {
            "name": "HydraulicOil",
            "dataType": "boolean",
            "sourceColumn": "HydraulicOil"
          },
          {
            "name": "HydraulicOilComment",
            "dataType": "string",
            "sourceColumn": "HydraulicOilComment"
          },
          {
            "name": "HydraulicRams",
            "dataType": "boolean",
            "sourceColumn": "HydraulicRams"
          },
          {
            "name": "HydraulicRamsComment",
            "dataType": "string",
            "sourceColumn": "HydraulicRamsComment"
          },
          {
            "name": "Controls",
            "dataType": "boolean",
            "sourceColumn": "Controls"
          },
          {
            "name": "ControlsComment",
            "dataType": "string",
            "sourceColumn": "ControlsComment"
          },
          {
            "name": "Brakes",
            "dataType": "boolean",
            "sourceColumn": "Brakes"
          },
          {
            "name": "BrakesComment",
            "dataType": "string",
            "sourceColumn": "BrakesComment"
          },
          {
            "name": "Steering",
            "dataType": "boolean",
            "sourceColumn": "Steering"
          },
          {
            "name": "SteeringComment",
            "dataType": "string",
            "sourceColumn": "SteeringComment"
          },
          {
            "name": "Instruments",
            "dataType": "boolean",
            "sourceColumn": "Instruments"
          },
          {
            "name": "InstrumentsComment",
            "dataType": "string",
            "sourceColumn": "InstrumentsComment"
          },
          {
            "name": "Horn",
            "dataType": "boolean",
            "sourceColumn": "Horn"
          },
          {
            "name": "HornComments",
            "dataType": "string",
            "sourceColumn": "HornComments"
          },
          {
            "name": "Attachments",
            "dataType": "boolean",
            "sourceColumn": "Attachments"
          },
          {
            "name": "AttachmentsComments",
            "dataType": "string",
            "sourceColumn": "AttachmentsComments"
          },
          {
            "name": "Hours",
            "dataType": "int64",
            "sourceColumn": "Hours"
          },
          {
            "name": "AddedBy",
            "dataType": "string",
            "sourceColumn": "AddedBy"
          },
          {
            "name": "Added",
            "dataType": "dateTime",
            "sourceColumn": "Added"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "CMA",
            "dataType": "string",
            "sourceColumn": "CMA"
          },
          {
            "name": "AdditionalComment",
            "dataType": "string",
            "sourceColumn": "AdditionalComment"
          },
          {
            "name": "image",
            "dataType": "string",
            "sourceColumn": "image"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Databases(\"ppdc1sql01\\PartsPlus\"),",
                "    TF_WebApp_PartsControlBox = Source{[Name=\"TF_WebApp_PartsControlBox\"]}[Data],",
                "    dbo_tForkliftInspectionLog = TF_WebApp_PartsControlBox{[Schema=\"dbo\",Item=\"tForkliftInspectionLog\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_tForkliftInspectionLog,{{\"Added\", type date}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "VI Dim Date",
        "columns": [
          {
            "name": "TF_Date_ID",
            "dataType": "int64",
            "sourceColumn": "TF_Date_ID"
          },
          {
            "name": "DayNum",
            "dataType": "int64",
            "sourceColumn": "DayNum"
          },
          {
            "name": "WeekNum",
            "dataType": "int64",
            "sourceColumn": "WeekNum"
          },
          {
            "name": "MonthNum",
            "dataType": "int64",
            "sourceColumn": "MonthNum"
          },
          {
            "name": "QtrNum",
            "dataType": "int64",
            "sourceColumn": "QtrNum"
          },
          {
            "name": "HalfYrNum",
            "dataType": "int64",
            "sourceColumn": "HalfYrNum"
          },
          {
            "name": "WeekDayNum",
            "dataType": "int64",
            "sourceColumn": "WeekDayNum"
          },
          {
            "name": "MonthDayNum",
            "dataType": "int64",
            "sourceColumn": "MonthDayNum"
          },
          {
            "name": "QtrDayNum",
            "dataType": "int64",
            "sourceColumn": "QtrDayNum"
          },
          {
            "name": "HalfYrDayNum",
            "dataType": "int64",
            "sourceColumn": "HalfYrDayNum"
          },
          {
            "name": "IsWorkingDay_Eng",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_Eng"
          },
          {
            "name": "IsWorkingDay_NI",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_NI"
          },
          {
            "name": "IsWorkingDay_CI",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_CI"
          },
          {
            "name": "IsADP_WorkingDay_Eng",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_Eng"
          },
          {
            "name": "IsADP_WorkingDay_NI",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_NI"
          },
          {
            "name": "IsADP_WorkingDay_CI",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_CI"
          },
          {
            "name": "WorkingDayNumYr_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_Eng"
          },
          {
            "name": "WorkingDayNumBi_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_Eng"
          },
          {
            "name": "WorkingDayNumQtr_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_Eng"
          },
          {
            "name": "WorkingDayNumMon_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_Eng"
          },
          {
            "name": "WorkingDayNumYr_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_NI"
          },
          {
            "name": "WorkingDayNumBi_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_NI"
          },
          {
            "name": "WorkingDayNumQtr_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_NI"
          },
          {
            "name": "WorkingDayNumMon_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_NI"
          },
          {
            "name": "WorkingDayNumYr_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_CI"
          },
          {
            "name": "WorkingDayNumBi_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_CI"
          },
          {
            "name": "WorkingDayNumQtr_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_CI"
          },
          {
            "name": "WorkingDayNumMon_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_CI"
          },
          {
            "name": "ShortDayName",
            "dataType": "string",
            "sourceColumn": "ShortDayName"
          },
          {
            "name": "LongDayName",
            "dataType": "string",
            "sourceColumn": "LongDayName"
          },
          {
            "name": "ShortMonName",
            "dataType": "string",
            "sourceColumn": "ShortMonName"
          },
          {
            "name": "LongMonName",
            "dataType": "string",
            "sourceColumn": "LongMonName"
          },
          {
            "name": "ShortYr",
            "dataType": "string",
            "sourceColumn": "ShortYr"
          },
          {
            "name": "LongYr",
            "dataType": "string",
            "sourceColumn": "LongYr"
          },
          {
            "name": "YYYY_MM_DD_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "YYYY_MM_DD_dashSep"
          },
          {
            "name": "YYYY_MM_DD_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "YYYY_MM_DD_slashSep"
          },
          {
            "name": "DD_MM_YY_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YY_dashSep"
          },
          {
            "name": "DD_MM_YY_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YY_slashSep"
          },
          {
            "name": "DD_MM_YYYY_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YYYY_dashSep"
          },
          {
            "name": "DD_MM_YYYY_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YYYY_slashSep"
          },
          {
            "name": "Comments",
            "dataType": "string",
            "sourceColumn": "Comments"
          },
          {
            "name": "RunBy",
            "dataType": "string",
            "sourceColumn": "RunBy"
          },
          {
            "name": "Rundate",
            "dataType": "dateTime",
            "sourceColumn": "Rundate"
          },
          {
            "type": "calculated",
            "name": "StartOfWeek",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(min('VI Dim Date'[DD_MM_YYYY_dashSep]),filter('VI Dim Date','VI Dim Date'[WeekNum]=EARLIER('VI Dim Date'[WeekNum])&&YEAR('VI Dim Date'[DD_MM_YYYY_dashSep])=EARLIER('VI Dim Date'[DateYear])))"
          },
          {
            "type": "calculated",
            "name": "DateYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " YEAR('VI Dim Date'[DD_MM_YYYY_slashSep])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Databases(\"PPDC1SQL01\\PartsPlus\"),",
                "    PP_SurchargeMgmt = Source{[Name=\"PP_SurchargeMgmt\"]}[Data],",
                "    dim_TF_Date = PP_SurchargeMgmt{[Schema=\"dim\",Item=\"TF_Date\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dim_TF_Date,{{\"DD_MM_YY_slashSep\", type date}}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each Date.IsInCurrentYear([DD_MM_YY_slashSep]) or Date.IsInPreviousYear([DD_MM_YY_slashSep])),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Filtered Rows\",{{\"DD_MM_YYYY_slashSep\", type date}, {\"DD_MM_YY_dashSep\", type date}, {\"YYYY_MM_DD_dashSep\", type date}, {\"YYYY_MM_DD_slashSep\", type date}, {\"DD_MM_YYYY_dashSep\", type date}})",
                "in",
                "    #\"Changed Type1\""
              ]
            }
          }
        ]
      },
      {
        "name": "FI Dim Date",
        "columns": [
          {
            "name": "TF_Date_ID",
            "dataType": "int64",
            "sourceColumn": "TF_Date_ID"
          },
          {
            "name": "DayNum",
            "dataType": "int64",
            "sourceColumn": "DayNum"
          },
          {
            "name": "WeekNum",
            "dataType": "int64",
            "sourceColumn": "WeekNum"
          },
          {
            "name": "MonthNum",
            "dataType": "int64",
            "sourceColumn": "MonthNum"
          },
          {
            "name": "QtrNum",
            "dataType": "int64",
            "sourceColumn": "QtrNum"
          },
          {
            "name": "HalfYrNum",
            "dataType": "int64",
            "sourceColumn": "HalfYrNum"
          },
          {
            "name": "WeekDayNum",
            "dataType": "int64",
            "sourceColumn": "WeekDayNum"
          },
          {
            "name": "MonthDayNum",
            "dataType": "int64",
            "sourceColumn": "MonthDayNum"
          },
          {
            "name": "QtrDayNum",
            "dataType": "int64",
            "sourceColumn": "QtrDayNum"
          },
          {
            "name": "HalfYrDayNum",
            "dataType": "int64",
            "sourceColumn": "HalfYrDayNum"
          },
          {
            "name": "IsWorkingDay_Eng",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_Eng"
          },
          {
            "name": "IsWorkingDay_NI",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_NI"
          },
          {
            "name": "IsWorkingDay_CI",
            "dataType": "string",
            "sourceColumn": "IsWorkingDay_CI"
          },
          {
            "name": "IsADP_WorkingDay_Eng",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_Eng"
          },
          {
            "name": "IsADP_WorkingDay_NI",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_NI"
          },
          {
            "name": "IsADP_WorkingDay_CI",
            "dataType": "string",
            "sourceColumn": "IsADP_WorkingDay_CI"
          },
          {
            "name": "WorkingDayNumYr_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_Eng"
          },
          {
            "name": "WorkingDayNumBi_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_Eng"
          },
          {
            "name": "WorkingDayNumQtr_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_Eng"
          },
          {
            "name": "WorkingDayNumMon_Eng",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_Eng"
          },
          {
            "name": "WorkingDayNumYr_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_NI"
          },
          {
            "name": "WorkingDayNumBi_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_NI"
          },
          {
            "name": "WorkingDayNumQtr_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_NI"
          },
          {
            "name": "WorkingDayNumMon_NI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_NI"
          },
          {
            "name": "WorkingDayNumYr_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumYr_CI"
          },
          {
            "name": "WorkingDayNumBi_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumBi_CI"
          },
          {
            "name": "WorkingDayNumQtr_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumQtr_CI"
          },
          {
            "name": "WorkingDayNumMon_CI",
            "dataType": "int64",
            "sourceColumn": "WorkingDayNumMon_CI"
          },
          {
            "name": "ShortDayName",
            "dataType": "string",
            "sourceColumn": "ShortDayName"
          },
          {
            "name": "LongDayName",
            "dataType": "string",
            "sourceColumn": "LongDayName"
          },
          {
            "name": "ShortMonName",
            "dataType": "string",
            "sourceColumn": "ShortMonName"
          },
          {
            "name": "LongMonName",
            "dataType": "string",
            "sourceColumn": "LongMonName"
          },
          {
            "name": "ShortYr",
            "dataType": "string",
            "sourceColumn": "ShortYr"
          },
          {
            "name": "LongYr",
            "dataType": "string",
            "sourceColumn": "LongYr"
          },
          {
            "name": "YYYY_MM_DD_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "YYYY_MM_DD_dashSep"
          },
          {
            "name": "YYYY_MM_DD_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "YYYY_MM_DD_slashSep"
          },
          {
            "name": "DD_MM_YY_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YY_dashSep"
          },
          {
            "name": "DD_MM_YY_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YY_slashSep"
          },
          {
            "name": "DD_MM_YYYY_dashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YYYY_dashSep"
          },
          {
            "name": "DD_MM_YYYY_slashSep",
            "dataType": "dateTime",
            "sourceColumn": "DD_MM_YYYY_slashSep"
          },
          {
            "name": "Comments",
            "dataType": "string",
            "sourceColumn": "Comments"
          },
          {
            "name": "RunBy",
            "dataType": "string",
            "sourceColumn": "RunBy"
          },
          {
            "name": "Rundate",
            "dataType": "dateTime",
            "sourceColumn": "Rundate"
          },
          {
            "type": "calculated",
            "name": "StartOfWeek",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(min('FI Dim Date'[DD_MM_YYYY_dashSep]),filter('FI Dim Date','FI Dim Date'[WeekNum]=EARLIER('FI Dim Date'[WeekNum])&&YEAR('FI Dim Date'[DD_MM_YYYY_dashSep])=EARLIER('FI Dim Date'[DateYear])))"
          },
          {
            "type": "calculated",
            "name": "DateYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " YEAR('FI Dim Date'[DD_MM_YYYY_slashSep])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Databases(\"PPDC1SQL01\\PartsPlus\"),",
                "    PP_SurchargeMgmt = Source{[Name=\"PP_SurchargeMgmt\"]}[Data],",
                "    dim_TF_Date = PP_SurchargeMgmt{[Schema=\"dim\",Item=\"TF_Date\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(dim_TF_Date,{{\"DD_MM_YY_slashSep\", type date}}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each Date.IsInCurrentYear([DD_MM_YY_slashSep]) or Date.IsInPreviousYear([DD_MM_YY_slashSep])),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Filtered Rows\",{{\"DD_MM_YYYY_slashSep\", type date}, {\"DD_MM_YY_dashSep\", type date}, {\"YYYY_MM_DD_dashSep\", type date}, {\"YYYY_MM_DD_slashSep\", type date}, {\"DD_MM_YYYY_dashSep\", type date}})",
                "in",
                "    #\"Changed Type1\""
              ]
            }
          }
        ]
      },
      {
        "name": "tDriverSecurityChecks",
        "columns": [
          {
            "name": "SecurityID",
            "dataType": "int64",
            "sourceColumn": "SecurityID"
          },
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "DriverID",
            "dataType": "int64",
            "sourceColumn": "DriverID"
          },
          {
            "name": "DriverUsername",
            "dataType": "string",
            "sourceColumn": "DriverUsername"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "AuditedBy",
            "dataType": "string",
            "sourceColumn": "AuditedBy"
          },
          {
            "name": "PaperworkMissing",
            "dataType": "boolean",
            "sourceColumn": "PaperworkMissing"
          },
          {
            "name": "Witness",
            "dataType": "string",
            "sourceColumn": "Witness"
          },
          {
            "name": "DatePerformed",
            "dataType": "dateTime",
            "sourceColumn": "DatePerformed"
          },
          {
            "name": "Details",
            "dataType": "string",
            "sourceColumn": "Details"
          },
          {
            "name": "Comments",
            "dataType": "string",
            "sourceColumn": "Comments"
          },
          {
            "name": "image",
            "dataType": "string",
            "sourceColumn": "image"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox\",",
                "    dbo_tDriverSecurityChecks = Source{[Schema=\"dbo\",Item=\"tDriverSecurityChecks\"]}[Data]",
                "in",
                "    dbo_tDriverSecurityChecks"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Today Checks",
            "expression": " calculate(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),tDriverSecurityChecks[DatePerformed]>TODAY())+0"
          },
          {
            "name": "Today Fails",
            "expression": " CALCULATE(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),tDriverSecurityChecks[DatePerformed]>TODAY(),tDriverSecurityChecks[PaperworkMissing]=TRUE())+0"
          },
          {
            "name": "Week Checks",
            "expression": " calculate(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),tDriverSecurityChecks[DatePerformed]>TODAY()-WEEKDAY(TODAY(),3)-1)+0"
          },
          {
            "name": "Week Fails",
            "expression": " CALCULATE(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),tDriverSecurityChecks[DatePerformed]>TODAY()-WEEKDAY(TODAY(),3)-1,tDriverSecurityChecks[PaperworkMissing]=TRUE())+0"
          },
          {
            "name": "Month Checks",
            "expression": " CALCULATE(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),month(tDriverSecurityChecks[DatePerformed])=MONTH(TODAY()))+0"
          },
          {
            "name": "Month Fails",
            "expression": " CALCULATE(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),month(tDriverSecurityChecks[DatePerformed])=MONTH(TODAY()),tDriverSecurityChecks[PaperworkMissing]=TRUE())+0"
          },
          {
            "name": "Year Fails",
            "expression": " CALCULATE(DISTINCTCOUNT(tDriverSecurityChecks[DriverID]),year(tDriverSecurityChecks[DatePerformed])=YEAR(TODAY()),tDriverSecurityChecks[PaperworkMissing]=TRUE())+0"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "600"
      }
    ]
  },
  "id": "SemanticModel"
}