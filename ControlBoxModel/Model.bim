{
  "name": "SemanticModel",
  "compatibilityLevel": 1500,
  "model": {
    "culture": "en-GB",
    "dataSources": [
      {
        "type": "structured",
        "name": "SQL/PPDC1SQL01\\PartsPlus;TF_WebApp_PartsControlBox",
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "PPDC1SQL01\\PartsPlus",
            "database": "TF_WebApp_PartsControlBox"
          },
          "authentication": null,
          "query": null
        },
        "options": {},
        "credential": {
          "AuthenticationKind": "Windows",
          "kind": "SQL",
          "path": "ppdc1sql01\\partsplus;TF_WebApp_PartsControlBox",
          "Username": "partsplusuk\\robby.lee",
          "EncryptConnection": false
        }
      }
    ],
    "tables": [
      {
        "name": "DriverStats",
        "columns": [
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "DriverName",
            "dataType": "string",
            "sourceColumn": "DriverName"
          },
          {
            "name": "UserType",
            "dataType": "string",
            "sourceColumn": "UserType"
          },
          {
            "name": "Available",
            "dataType": "string",
            "sourceColumn": "Available"
          },
          {
            "name": "Vehicle",
            "dataType": "string",
            "sourceColumn": "Vehicle"
          },
          {
            "name": "Forklift",
            "dataType": "string",
            "sourceColumn": "Forklift"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select DC.Site,#(lf)DC.DriverName,#(lf)UC.UserType,#(lf)DC.Available,#(lf)DC.Vehicle,#(lf)DC.Forklift#(lf)from TF_WebApp_PartsControlBox.dbo.tDriverConfig DC#(lf)Left Join TF_WebApp_PartsControlBox.dbo.tUserConfig UC On DC.DriverUsername = UC.Username\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalDrivers",
            "expression": " if(isblank(count('DriverStats'[DriverName])),0,COUNT(('DriverStats'[DriverName])))"
          },
          {
            "name": "ForkliftAccess",
            "expression": " if(isblank(countrows(filter(DriverStats,DriverStats[Forklift] = \"1\"))),0,countrows(filter(DriverStats,DriverStats[Forklift]=\"1\")))"
          },
          {
            "name": "ForkliftOff",
            "expression": " if(isblank(CALCULATE(COUNTROWS(DriverStats),FILTER(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Forklift]=\"1\"))),0,CALCULATE(COUNTROWS(DriverStats),FILTER(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Forklift]=\"1\")))"
          },
          {
            "name": "Temps",
            "expression": " if(isblank(COUNTROWS(FILTER(DriverStats,DriverStats[UserType]=\"Temp\"))),0,COUNTROWS(FILTER(DriverStats,DriverStats[UserType]=\"Temp\")))"
          },
          {
            "name": "VanAccess",
            "expression": " if(isblank(COUNTROWS(filter(DriverStats,DriverStats[Vehicle] = \"1\"))),0,countrows(filter(DriverStats,DriverStats[Vehicle] = \"1\")))"
          },
          {
            "name": "VanOff",
            "expression": " if(isblank(CALCULATE(COUNTROWS(DriverStats),filter(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Vehicle]=\"1\"))),0,CALCULATE(COUNTROWS(DriverStats),filter(DriverStats,DriverStats[Available]=\"0\" && DriverStats[Vehicle]=\"1\")))"
          }
        ]
      },
      {
        "name": "VehicleStats",
        "columns": [
          {
            "name": "Site",
            "dataType": "string",
            "sourceColumn": "Site"
          },
          {
            "name": "VehicleID",
            "dataType": "int64",
            "sourceColumn": "VehicleID"
          },
          {
            "name": "Registration",
            "dataType": "string",
            "sourceColumn": "Registration"
          },
          {
            "name": "DriverName",
            "dataType": "string",
            "sourceColumn": "DriverName"
          },
          {
            "name": "VOR",
            "dataType": "int64",
            "sourceColumn": "VOR"
          },
          {
            "name": "VORStart",
            "dataType": "dateTime",
            "sourceColumn": "VORStart"
          },
          {
            "name": "VORReason",
            "dataType": "string",
            "sourceColumn": "VORReason"
          },
          {
            "name": "TodayChecks",
            "dataType": "int64",
            "sourceColumn": "TodayChecks"
          },
          {
            "name": "WeekChecks",
            "dataType": "int64",
            "sourceColumn": "WeekChecks"
          },
          {
            "name": "MonthChecks",
            "dataType": "int64",
            "sourceColumn": "MonthChecks"
          },
          {
            "name": "YearChecks",
            "dataType": "int64",
            "sourceColumn": "YearChecks"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select VC.Site,",
                "VC.VehicleID,",
                "VC.Registration,",
                "VC.DriverName,",
                "Case When VV.Registration is not null Then '1' Else 0 End as VOR,",
                "Case When VV.Registration is not null and VV.VOREndDate is null Then VV.VORStartDate Else null End as VORStart,",
                "Case When VV.Registration is not null and VV.VOREndDate is null Then VV.StartComment Else '' End as VORReason,",
                "Case When VI.Added between convert (date,getdate()) and getdate() Then 1 Else 0 End as TodayChecks,",
                "Case When VI.Added between dateadd(wk,datediff(wk,0,getdate()),0) and getdate() Then 1 Else 0 End as WeekChecks,",
                "Case When VI.Added between dateadd(mm,datediff(mm,0,getdate()),0) and getdate() Then 1 Else 0 End as MonthChecks,",
                "Case When VI.Added between dateadd(yy,datediff(yy,0,getdate()),0) and getdate() Then 1 Else 0 End as YearChecks",
                "from TF_WebApp_PartsControlBox.dbo.tVehicleConfig VC",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVOR_Vehicle VV On VC.Registration = VV.Registration",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVehicleInspectionLog VI On VC.Registration = VI.Registration",
                "\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalVehicles",
            "expression": " if(isblank(DISTINCTCOUNT(VehicleStats[Registration])),0,distinctcount(VehicleStats[Registration]))+0"
          },
          {
            "name": "TodayChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[TodayChecks]=1)),[TotalVehicles])=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[TodayChecks]=1)),[TotalVehicles]))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "WeekChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[WeekChecks]=1)),[TotalVehicles]*WEEKDAY(TODAY(),2))=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[WeekChecks]=1)),[TotalVehicles]*WEEKDAY(TODAY(),2)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "MonthChecks%",
            "expression": " IF(DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[MonthChecks]=1)),[TotalVehicles]*DAY(TODAY()))=0,0,DIVIDE(CALCULATE(DISTINCTCOUNT(VehicleStats[Registration]),FILTER(VehicleStats,VehicleStats[MonthChecks]=1)),[TotalVehicles]*DAY(TODAY())))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "ForkliftStats",
        "columns": [
          {
            "name": "site",
            "dataType": "string",
            "sourceColumn": "site"
          },
          {
            "name": "ForkliftID",
            "dataType": "int64",
            "sourceColumn": "ForkliftID"
          },
          {
            "name": "VOR",
            "dataType": "int64",
            "sourceColumn": "VOR"
          },
          {
            "name": "VORStart",
            "dataType": "dateTime",
            "sourceColumn": "VORStart"
          },
          {
            "name": "VORReason",
            "dataType": "string",
            "sourceColumn": "VORReason"
          },
          {
            "name": "TodayChecks",
            "dataType": "int64",
            "sourceColumn": "TodayChecks"
          },
          {
            "name": "WeekChecks",
            "dataType": "int64",
            "sourceColumn": "WeekChecks"
          },
          {
            "name": "MonthChecks",
            "dataType": "int64",
            "sourceColumn": "MonthChecks"
          },
          {
            "name": "YearChecks",
            "dataType": "int64",
            "sourceColumn": "YearChecks"
          },
          {
            "name": "Defect",
            "dataType": "int64",
            "sourceColumn": "Defect"
          },
          {
            "name": "DefectReason",
            "dataType": "string",
            "sourceColumn": "DefectReason"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Sql.Database(\"PPDC1SQL01\\PartsPlus\", \"TF_WebApp_PartsControlBox\", [Query=\"Select FC.site,",
                "FC.ForkliftID,",
                "Case When VF.tForkliftID is not null Then '1' Else 0 End as VOR,",
                "Case When VF.tForkliftID is not null and VF.VOREndDate is null Then VF.VORStartDate Else null End as VORStart,",
                "Case When VF.tForkliftID is not null and VF.VOREndDate is null Then VF.StartComment Else '' End as VORReason,",
                "Case When FI.Added = getdate() Then 1 Else 0 End as TodayChecks,",
                "Case When FI.Added between dateadd(wk,datediff(wk,0,getdate()),0) and getdate() Then 1 Else 0 End as WeekChecks,",
                "Case When FI.Added between dateadd(mm,datediff(mm,0,getdate()),0) and getdate() Then 1 Else 0 End as MonthChecks,",
                "Case When FI.Added between dateadd(yy,datediff(yy,0,getdate()),0) and getdate() Then 1 Else 0 End as YearChecks,",
                "Case When DL.identifier is not null and DL.ActionedDate is null Then 1 Else 0 End as Defect,",
                "Case When DL.identifier is not null and DL.ActionedDate is null Then DL.Defect Else '' End as DefectReason",
                "from TF_WebApp_PartsControlBox.dbo.tForkliftConfig FC",
                "Left Join TF_WebApp_PartsControlBox.dbo.tVOR_Forklift VF On FC.ForkliftID = VF.tForkliftID",
                "Left Join TF_WebApp_PartsControlBox.dbo.tForkliftInspectionLog FI On FC.ForkliftID = FI.ForkLiftID",
                "Left Join TF_WebApp_PartsControlBox.dbo.tDefectLog DL On FC.ForkliftID = DL.ForkliftID",
                "",
                "\"])",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalForklifts",
            "expression": " if(DISTINCTCOUNT(ForkliftStats[ForkliftID])=0,0,DISTINCTCOUNT(ForkliftStats[ForkliftID]))"
          },
          {
            "name": "FLTodayChecks%",
            "expression": " if(divide(SUM(ForkliftStats[TodayChecks]),COUNTROWS(ForkliftStats))=0,0,divide(SUM(ForkliftStats[TodayChecks]),COUNTROWS(ForkliftStats)))",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FLWeekChecks%",
            "expression": " if(divide(sum(ForkliftStats[WeekChecks]),COUNTROWS(ForkliftStats))=0,0,divide(sum(ForkliftStats[WeekChecks]),COUNTROWS(ForkliftStats)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "FLMonthChecks%",
            "expression": " if(divide(sum(ForkliftStats[MonthChecks]),COUNTROWS(ForkliftStats))=0,0,divide(sum(ForkliftStats[MonthChecks]),COUNTROWS(ForkliftStats)))+0",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "600"
      }
    ]
  },
  "id": "SemanticModel"
}